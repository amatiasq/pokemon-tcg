#!/usr/bin/env bun

import { readdir, readFile } from 'fs/promises';
import { supabase } from '../src/supabase';

const sets = {};

await supabase.auth.signInWithPassword({
  email: 'admin@amatiasq.com',
  password: 'admin',
});

for (const file of await readdir('db')) {
  const content = await readFile(`db/${file}`, 'utf-8');
  const card = JSON.parse(content) as Card;

  await uploadSet(card.set);
  console.log(card.id, await uploadCard(card));
}

async function uploadSet({ images, legalities, ...set }: Set) {
  if (!sets[set.id]) {
    sets[set.id] = await supabase.from('sets').upsert({
      ...set,
      img_symbol: images.symbol,
      img_logo: images.logo,
    });

    if (sets[set.id].error) {
      console.error('SET', sets[set.id].error);
      process.exit(1);
    }
  }

  return sets[set.id];
}

async function uploadCard({
  id,
  name,
  supertype,
  subtypes,
  set,
  number,
  legalities,
  images,
  ...more
}: Card) {
  const { statusText, error } = await supabase.from('cards').upsert({
    id,
    name,
    supertype,
    subtypes,
    set_id: set.id,
    number,
    img_thumb: images.small,
    img_large: images.large,
    more,
  });

  if (error) {
    console.error('CARD', error);
    process.exit(1);
  }

  return statusText;
}

// Generated by https://quicktype.io

export interface Card {
  id: string;
  name: string;
  supertype: Supertype;
  subtypes: string[];
  set: Set;
  number: string;
  legalities: Legalities;
  images: CardImages;

  hp?: string;
  types?: RetreatCost[];
  attacks?: Attack[];
  weaknesses?: Resistance[];
  resistances?: Resistance[];
  retreatCost?: RetreatCost[];
  convertedRetreatCost?: number;
  artist?: string;
  rarity: Rarity;
  flavorText?: string;
  nationalPokedexNumbers?: number[];
  regulationMark?: RegulationMark;
  abilities?: Ability[];
  rules?: string[];
  evolvesFrom?: string;
  evolvesTo?: string[];
}

export interface Ability {
  name: string;
  text: string;
  type: Type;
}

export enum Type {
  Ability = 'Ability',
}

export interface Attack {
  name: string;
  cost: RetreatCost[];
  convertedEnergyCost: number;
  damage: string;
  text?: string;
}

export enum RetreatCost {
  Colorless = 'Colorless',
  Darkness = 'Darkness',
  Dragon = 'Dragon',
  Fighting = 'Fighting',
  Fire = 'Fire',
  Free = 'Free',
  Grass = 'Grass',
  Lightning = 'Lightning',
  Metal = 'Metal',
  Psychic = 'Psychic',
  Water = 'Water',
}

export interface CardImages {
  small: string;
  large: string;
}

export interface Legalities {
  unlimited: Expanded;
  standard?: Expanded;
  expanded: Expanded;
}

export enum Expanded {
  Legal = 'Legal',
}

export enum Rarity {
  Common = 'Common',
  DoubleRare = 'Double Rare',
  HyperRare = 'Hyper Rare',
  IllustrationRare = 'Illustration Rare',
  Promo = 'Promo',
  RadiantRare = 'Radiant Rare',
  Rare = 'Rare',
  RareHolo = 'Rare Holo',
  RareHoloV = 'Rare Holo V',
  RareHoloVMAX = 'Rare Holo VMAX',
  RareShinyGX = 'Rare Shiny GX',
  RareUltra = 'Rare Ultra',
  Uncommon = 'Uncommon',
}

export enum RegulationMark {
  D = 'D',
  E = 'E',
  F = 'F',
  G = 'G',
}

export interface Resistance {
  type: RetreatCost;
  value: string;
}

export interface Set {
  id: string;
  name: string;
  series: Series;
  printedTotal: number;
  total: number;
  legalities: Legalities;
  ptcgoCode?: string;
  releaseDate: string;
  updatedAt: string;
  images: SetImages;
}

export interface SetImages {
  symbol: string;
  logo: string;
}

export enum Series {
  ScarletViolet = 'Scarlet & Violet',
  SunMoon = 'Sun & Moon',
  SwordShield = 'Sword & Shield',
  Xy = 'XY',
}

export enum Supertype {
  Energy = 'Energy',
  Pokémon = 'Pokémon',
  Trainer = 'Trainer',
}
